# SJS 12/30/14.
# Script to create individual trees, alignments for amine receptor subtypes.
# Note that columns which contain only gaps are removed for each subclade alignment.

import re
import dendropy
import numpy as np
from Bio import AlignIO
from copy import deepcopy

# consensus structure for FULL alignment.



def parse_desc_file(desc_file):
    ''' Convert sequence description file to a dictionary with key:values as amine_subtype:[ids] '''
    
    subtypes = {}
    descf = open(desc_file, 'r')
    for line in descf:
        if "Gene" in line:
            continue
        fields = line.split('\t')
        id = fields[0]
        amine = fields[1]
        
        # These should be merged.
        if 'TAAR' in amine:
            amine = 'TAAR'
        if amine == 'DRD1' or amine == 'DRD5':
            amine = 'DRD15'
        if amine == 'HRH3' or amine == 'HRH4':
            amine = 'HRH34'
         
        if amine in subtypes:
            subtypes[ amine ].append( id ) 
        else:
            subtypes[ amine ] = [ id ]
            
    return subtypes


def determine_gap_columns(subaln):
    ''' Determine which columns are only gaps in the given subalignment so they can be removed. '''
    
    gap_only = []
    # Convert subalignment to numpy array
    np_aln = np.zeros( [ len(subaln), len(subaln[0]) ], dtype = 'int8')
    for i in range(len(subaln)):
        j = 0
        for pos in subaln[i]:
            if pos != '-':
                np_aln[i][j] = 1
            j += 1
    # Determine gap-only columns
    i = 0
    for col in np_aln.T:
        if np.array_equal( col, np.zeros([len(col)]) ):
            gap_only.append(i)
        i += 1
    return gap_only
            

def extract_seqs(gap_only, subseqs, prot=True):
    keep = []
    for entry in subseqs:
        seq = ''
        if prot:
            for i in range(len(entry)):
                if i not in gap_only:
                    seq += entry[i]
        else:
            for i in range(0,len(entry),3):
                if i/3 not in gap_only:
                    seq += entry[i:i+3]
        keep.append(seq)
            
    return keep


def extract_consensus(gap_only):
    subcons = ''
    for i in range(len(FULL_CONSENSUS)):
        if i not in gap_only:
            subcons += FULL_CONSENSUS[i]
    return subcons
        
        








# input files defined
inpath = "/Users/sjspielman/Research/amine_receptors/analysis/"
outpath = "/Users/sjspielman/Research/amine_receptors/analysis/subclades/"
desc_file = path + "sequence_descriptions.txt"
full_alnp = path + "alignments/structural/protein_aln_struc_masked.fasta"
full_alnn = path + "alignments/structural/nucleotide_aln_struc_masked.fasta"
full_tree = path + "phylogeny/RAxML_bipartitions.struc_masked_part"

# parse input files
subtypes = parse_desc_file( desc_file )
alnp = AlignIO.read( full_alnp, "fasta" )
alnn = AlignIO.read( full_alnn, "fasta" )
tree = dendropy.Tree.get_from_path( full_tree, "newick", preserve_underscores = True )

# extract into individual subtype files
for subtype in subtypes:
    print "Extracting", subtype
    
    # output file names
    alnpfile  = outpath + subtype + "_aa.fasta"
    alnnfile  = outpath + subtype + "_nuc.fasta"
    strucfile = outpath + subtype + ".domains"
    treefile  = outpath + subtype + ".tree"
    
    # create subalign, but exclude columns which are only gaps in this subalignment.
    ids = []
    subseqs_p = []
    subseqs_n = []
    for entry in alnp:
        if str(entry.id) in subtypes[subtype]:
            subseqs_p.append( str(entry.seq ) )
            ids.append(str(entry.id))
    for entry in alnn:
        if str(entry.id) in ids:
            subseqs_n.append( str(entry.seq ) )
              
    gap_only = determine_gap_columns(subseqs_p)
    subseqs_p_nogaps = extract_seqs(gap_only, subseqs_p)
    subseqs_n_nogaps = extract_seqs(gap_only, subseqs_n, prot=False)
    consensus_nogaps = extract_consensus(gap_only)
    
    with open(alnpfile, 'w') as alnpf:
        for i in range(len(ids)):
            alnpf.write(">" + ids[i] + "\n" + subseqs_p_nogaps[i] + "\n")
    with open(alnnfile, 'w') as alnnf:
        for i in range(len(ids)):
            alnnf.write(">" + ids[i] + "\n" + subseqs_n_nogaps[i] + "\n")
    with open(strucfile, 'w') as strucf:
        strucf.write(consensus_nogaps)
    
    
    
    # create subtree
    temp_tree = deepcopy(tree)
    temp_tree.retain_taxa_with_labels( subtypes[subtype] )
    temp_tree_str = str(temp_tree).replace('[&U] ','')
    with open(treefile, 'w') as treef:
        treef.write(temp_tree_str + ';')

